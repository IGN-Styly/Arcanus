
plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}


group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.enginehub.org/repo/" }
    maven {
        url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

}

dependencies {

    // FORGE ******************************************************************************************************
    implementation "net.neoforged:neoforge:${neo_version}"

    // GECKOLIB ***************************************************************************************************
    implementation "software.bernie.geckolib:geckolib-neoforge-${minecraft_version}:${geckolib_version}"

    // CAELUS *****************************************************************************************************
    compileOnly "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}:api"
    localRuntime "com.illusivesoulworks.caelus:caelus-neoforge:${caelus_version}"

    // PLAYER ANIMATOR ********************************************************************************************
    //compileOnly "dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}"
    implementation "dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}"
    jarJar(group: "dev.kosmx.player-anim", name: "player-animation-lib-forge", version: "[${player_animator_version},${player_animator_version}]")

    // TETRA ******************************************************************************************************
    //compileOnly "se.mickelus.mutil:mutil:${mutil_version}"
    compileOnly "curse.maven:tetra-${tetra_version}"
    compileOnly "se.mickelus.mutil:mutil:${mutil_version}"

    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${irons_spells_version}")
    implementation "com.google.code.gson:gson:${gson_version}"

    compileOnly "mezz.jei:jei-${jei_mc_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${jei_mc_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${jei_mc_version}-neoforge:${jei_version}"

    // CURIOS
    implementation "curse.maven:adorned-1036809:5546365"
    // APOTHEOSIS
    compileOnly "curse.maven:apotheosis-${apotheosis_version}"
    localRuntime "curse.maven:mouse-tweaks-60089:5437296"
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}